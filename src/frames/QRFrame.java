/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package frames;

import com.google.gson.JsonObject;
import config.SystemApp;
import config.SystemPath;
import helper.DBTransactions;
import helper.QRGenerator;
import helper.SecretCode;
import helper.objects.UserSettings;
import java.awt.Image;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.ImageIcon;
import javax.swing.Timer;

/**
 *
 * @author staff
 */
public class QRFrame extends javax.swing.JFrame {

    /**
     * Creates new form QRFrame
     */
    public QRFrame() {
        initComponents();
        refresh();
    }

    LoginFrame parent;

    public QRFrame(LoginFrame fr) {
        initComponents();
        refresh();

        parent = fr;
    }

    private void refresh() {
        Timer timer = new Timer(2000, new ActionListener() {

            @Override
            public void actionPerformed(ActionEvent e) {

                generateQR();
                ((Timer) e.getSource()).stop();
            }
        });

        // Start the Timer
        timer.start();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        labelImage = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        buttonRefresh = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);
        setType(java.awt.Window.Type.POPUP);
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("QRCode"));
        jPanel1.setLayout(new java.awt.BorderLayout());

        labelImage.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labelImage.setIcon(new javax.swing.ImageIcon(getClass().getResource("/frames/images/preloader.gif"))); // NOI18N
        labelImage.setText("loading...");
        jPanel1.add(labelImage, java.awt.BorderLayout.CENTER);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Scan Me");

        buttonRefresh.setText("Refresh");
        buttonRefresh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonRefreshActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 211, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(76, 76, 76)
                        .addComponent(buttonRefresh)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(buttonRefresh)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    ImageIcon imageLoading = new javax.swing.ImageIcon(getClass().getResource("/frames/images/preloader.gif"));

    private void buttonRefreshActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonRefreshActionPerformed

        labelImage.setIcon(imageLoading);
        labelImage.setText("loading...");
        refresh();

    }//GEN-LAST:event_buttonRefreshActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing

        parent.setVisible(true);
        
    }//GEN-LAST:event_formWindowClosing

    private void generateQR() {

        SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMddHHmmss");
        String date = sdf.format(new Date());

        System.out.println("date now is " + date);
        // generate the qrcode
        QRGenerator engine = new QRGenerator();
        String fileName = engine.generateNewName(date);

        DBTransactions db = new DBTransactions(SystemPath.DB_FILE);
        UserSettings objekUser = db.select_specific_UserSettings(1);

        // the data format is 
        // {phone: "0828282", key:"xxxxxx"} 
        // Add key-value pairs to the JsonObject
        SecretCode sc = new SecretCode();
        sc.setText(objekUser.getPass());
        sc.applyRandomSalt();
        sc.setSecretKey(SystemApp.APP_NAME);

        try {
            JsonObject jsonObject = new JsonObject();
            jsonObject.addProperty("phone", objekUser.getContact());
            jsonObject.addProperty("key", sc.encrypt());
            // pass this salt to another platform who will need to decrypt the code
            //jsonObject.addProperty("salt", sc.getHumanSalt());

            String secret = jsonObject.toString();
            File folderPath = new File(SystemPath.getFolderRecovery());

            System.out.println("data passed is " + secret);

            if (!folderPath.exists()) {
                folderPath.mkdirs();
            }

            File finalPath = new File(SystemPath.getFolderRecovery(), fileName);

            // display it into jalbel
            engine.generateQRCode(secret, finalPath.getAbsolutePath());
            setImageScaled(finalPath);
        } catch (Exception ex) {
            System.err.println("QRCode for password recovery failed to be created!");
            ex.printStackTrace();
        }

    }

    private void setImageScaled(File imagePath) throws Exception {

        // Get the size of the JLabel
        int labelWidth = labelImage.getWidth();
        int labelHeight = labelImage.getHeight();

        // Read the original image
        BufferedImage originalImage = ImageIO.read((imagePath));

        // Calculate the scaling factors for width and height
        double scaleX = (double) labelWidth / originalImage.getWidth();
        double scaleY = (double) labelHeight / originalImage.getHeight();

        // Choose the minimum scaling factor to maintain the image's aspect ratio
        double scale = Math.min(scaleX, scaleY);

        // Calculate the scaled width and height
        int scaledWidth = (int) (originalImage.getWidth() * scale);
        int scaledHeight = (int) (originalImage.getHeight() * scale);

        // Scale the original image
        Image scaledImage = originalImage.getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);

        // Create an ImageIcon with the scaled image
        ImageIcon scaledIcon = new ImageIcon(scaledImage);

        // Set the scaled ImageIcon to the JLabel
        labelImage.setIcon(scaledIcon);
        labelImage.setText("");

    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(QRFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(QRFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(QRFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(QRFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new QRFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonRefresh;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JLabel labelImage;
    // End of variables declaration//GEN-END:variables
}
